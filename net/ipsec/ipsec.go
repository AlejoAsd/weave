// package IPsec provides primitives for establishing IPsec in the fastdp mode.
package ipsec

// TODO:
// * atomic inserts
//
// * vishvananda/netlink comments
//
// * test with non-default ports
// * test on larger cluster
//
// * user-configurable life-times
// * tests for rekeying
// * check flow

import (
	"crypto/rand"
	"crypto/sha256"
	"encoding/binary"
	"fmt"
	"io"
	"net"
	"strconv"
	"sync"
	"syscall"

	"github.com/coreos/go-iptables/iptables"
	"github.com/pkg/errors"
	"github.com/vishvananda/netlink"
	"github.com/vishvananda/netlink/nl"
	"golang.org/x/crypto/hkdf"

	"github.com/weaveworks/mesh"
)

const (
	protoVsn = 1 // fastdp-crypto vsn

	keySize   = 36 // AES-GCM key 32 bytes + 4 bytes salt
	nonceSize = 32 // HKDF nonce size

	mark    = uint32(0x1) << 17 // iptables marks
	markStr = "0x20000/0x20000" // update if mark changes

	tableMangle  = "mangle"
	tableFilter  = "filter"
	chainIn      = "WEAVE-IPSEC-IN"
	chainInMark  = "WEAVE-IPSEC-IN-MARK"
	chainOut     = "WEAVE-IPSEC-OUT"
	chainOutMark = "WEAVE-IPSEC-OUT-MARK"
)

type SPI uint32

// Used to identify:
// - directional SPIs,
// - ipsec establishments.
type spiID [16]byte

type spiInfo struct {
	spi       SPI
	isDirOut  bool
	initRekey func() error
}

func getSPIId(srcPeer, dstPeer mesh.PeerName) (id spiID) {
	binary.BigEndian.PutUint64(id[:], uint64(srcPeer))
	binary.BigEndian.PutUint64(id[8:], uint64(dstPeer))
	return
}

// IPSec

type IPSec struct {
	sync.RWMutex
	ipt *iptables.IPTables

	rc      *connRefCount
	spiInfo map[spiID]spiInfo
	spis    map[SPI]*spiInfo
}

func New() (*IPSec, error) {
	ipt, err := iptables.New()
	if err != nil {
		return nil, errors.Wrap(err, "iptables new")
	}

	ipsec := &IPSec{
		ipt:     ipt,
		rc:      newConnRefCount(),
		spiInfo: make(map[spiID]spiInfo),
		spis:    make(map[SPI]*spiInfo),
	}

	return ipsec, nil
}

// Monitor monitors expiration of outbound SAs and triggers re-keying.
func (ipsec *IPSec) Monitor() error {
	ch := make(chan netlink.XfrmMsg)
	errorCh := make(chan error)

	if err := netlink.XfrmMonitor(ch, nil, errorCh, nl.XFRM_MSG_EXPIRE); err != nil {
		return errors.Wrap(err, "xfrm monitor")
	}

	for {
		select {
		case err := <-errorCh:
			return err
		case msg := <-ch:
			if exp, ok := msg.(*netlink.XfrmMsgExpire); ok {
				if exp.Hard {
					if err := ipsec.handleHardExpire(exp); err != nil {
						return errors.Wrap(err, "hard expire")
					}
				} else {
					if err := ipsec.handleSoftExpire(exp); err != nil {
						return errors.Wrap(err, "soft expire")
					}
				}
			}
			// Ignore the rest, as other types of XFRM_MSG_* are not expected.
		}
	}
}

func (ipsec *IPSec) handleHardExpire(msg *netlink.XfrmMsgExpire) error {
	ipsec.Lock()
	defer ipsec.Unlock()

	spi := SPI(msg.XfrmState.Spi)

	// Remove iptables inbound rule for marking ESP packets with obsolete SPI
	if spiInfo, ok := ipsec.spis[spi]; ok && !spiInfo.isDirOut {
		if err := ipsec.removeDropNonEncryptedInbound(msg.XfrmState.Dst, msg.XfrmState.Src, spi); err != nil {
			return errors.Wrap(err, "remove inbound protecting rule")
		}
		delete(ipsec.spis, spi)
	}
	// TODO(mp) warn if SPI is not found

	return nil
}

func (ipsec *IPSec) handleSoftExpire(msg *netlink.XfrmMsgExpire) error {
	ipsec.Lock()
	defer ipsec.Unlock()

	spi := SPI(msg.XfrmState.Spi)

	// Trigger rekeying
	if spiInfo, ok := ipsec.spis[spi]; ok && spiInfo.initRekey != nil {
		// TODO(mp) include protovsn
		if err := spiInfo.initRekey(); err != nil {
			return errors.Wrap(err, "init rekey")
		}
	}
	// TODO(mp) warn if SPI is not found

	return nil
}

// InitSALocal initializes inbound ipsec from remotePeer and triggers
// the initialization on remotePeer.
//
// isRekey denotes whether the initialization was triggered by
// a re-keying request.
func (ipsec *IPSec) InitSALocal(localPeer, remotePeer mesh.PeerName, localIP, remoteIP net.IP, udpPort int, sessionKey *[32]byte, isRekey bool, initRemote func([]byte) error) error {
	// ID of inbound SPI
	spiID := getSPIId(remotePeer, localPeer)

	ipsec.Lock()
	defer ipsec.Unlock()

	// Check whether ipsec has been already established between the peers
	if !isRekey && ipsec.rc.get(spiID) > 1 {
		return nil
	}

	// Sanity check
	if isRekey {
		if _, ok := ipsec.spiInfo[spiID]; !ok {
			return fmt.Errorf("cannot find SPI by %x", spiID)
		}
	}

	// Derive SA key
	nonce, err := genNonce()
	if err != nil {
		return errors.Wrap(err, "generate nonce")
	}
	key, err := deriveKey(sessionKey[:], nonce, localPeer)
	if err != nil {
		return errors.Wrap(err, "derive key")
	}

	// Allocate SA
	sa, err := netlink.XfrmStateAllocSpi(xfrmAllocSpiState(remoteIP, localIP))
	if err != nil {
		return errors.Wrap(err, fmt.Sprintf("ip xfrm state allocspi (in, %s, %s)", remoteIP, localIP))
	}

	// Use SPI generated by the kernel. The kernel ensures {dstIP, spi} to
	// be unique.
	spi := SPI(sa.Spi)

	// Create SA
	if sa, err := xfrmState(remoteIP, localIP, spi, false, key); err == nil {
		if err := netlink.XfrmStateUpdate(sa); err != nil {
			return errors.Wrap(err, fmt.Sprintf("xfrm state update (in, %s, %s, 0x%x)", sa.Src, sa.Dst, sa.Spi))
		}
	} else {
		return errors.Wrap(err, "new xfrm state (in)")
	}

	// Install iptables rules
	if !isRekey {
		if err := ipsec.installDropNonEncrypted(localIP, remoteIP, udpPort, spi); err != nil {
			return errors.Wrap(err, fmt.Sprintf("install protecting rules (%s, %s, %d, 0x%x)", localIP, remoteIP, udpPort, spi))
		}
	} else {
		if err := ipsec.updateDropNonEncrypted(localIP, remoteIP, spi); err != nil {
			return errors.Wrap(err, fmt.Sprintf("update protecting rules (%s, %s, 0x%x)", localIP, remoteIP, spi))
		}
	}

	// Trigger the initialization on the remote peer
	msg := &msgInitSARemote{nonce, spi}
	if err := initRemote(msg.serialize()); err != nil {
		return errors.Wrap(err, "initRemote CREATE_SA")
	}

	si := spiInfo{spi: spi, isDirOut: false}
	ipsec.spiInfo[spiID] = si
	ipsec.spis[spi] = &si

	return nil
}

// InitSARemote initializes outbound ipsec to remotePeer.
// Triggered by remotePeer.
func (ipsec *IPSec) InitSARemote(msgInitSARemote []byte, localPeer, remotePeer mesh.PeerName, localIP, remoteIP net.IP, udpPort int, sessionKey *[32]byte, initRekey func() error) error {
	// ID of outbound SPI
	spiID := getSPIId(localPeer, remotePeer)

	msg, err := deserializeMsgInitSARemote(msgInitSARemote)
	if err != nil {
		return errors.Wrap(err, "deserialize InitSARemote")
	}
	spi := msg.spi

	ipsec.Lock()
	defer ipsec.Unlock()

	// We say that the initialization happened due to re-keying if
	// ipsec between peers has been previously established
	// TODO(mp) detect from msg
	_, isRekey := ipsec.spiInfo[spiID]

	// Derive SA key by using the received nonce
	key, err := deriveKey(sessionKey[:], msg.nonce, remotePeer)
	if err != nil {
		return errors.Wrap(err, "derive key")
	}

	// Create SA
	if sa, err := xfrmState(localIP, remoteIP, spi, true, key); err == nil {
		if err := netlink.XfrmStateAdd(sa); err != nil {
			return errors.Wrap(err, fmt.Sprintf("xfrm state update (out, %s, %s, 0x%x)", sa.Src, sa.Dst, sa.Spi))
		}
	} else {
		return errors.Wrap(err, "new xfrm state (out)")
	}

	// Create or update SP
	sp := xfrmPolicy(localIP, remoteIP, spi)
	if isRekey {
		if err := netlink.XfrmPolicyUpdate(sp); err != nil {
			return errors.Wrap(err, fmt.Sprintf("xfrm policy update (%s, %s, 0x%x)", localIP, remoteIP, spi))
		}
	} else {
		if err := netlink.XfrmPolicyAdd(sp); err != nil {
			return errors.Wrap(err, fmt.Sprintf("xfrm policy add (%s, %s, 0x%x)", localIP, remoteIP, spi))
		}
	}

	si := spiInfo{spi: spi, isDirOut: true, initRekey: initRekey}
	ipsec.spiInfo[spiID] = si
	ipsec.spis[spi] = &si

	return nil
}

// Destroy destroys any (inbound / outbound) ipsec establishment between the peers.
func (ipsec *IPSec) Destroy(localPeer, remotePeer mesh.PeerName, localIP, remoteIP net.IP, udpPort int) error {
	outSPIID := getSPIId(localPeer, remotePeer)
	inSPIID := getSPIId(remotePeer, localPeer)

	ipsec.Lock()
	defer ipsec.Unlock()

	// Destroy inbound

	// We ref-count only inbound connections as outbound establishments are
	// direct results of inbound establishments
	count := ipsec.rc.put(inSPIID)
	inSPIInfo, ok := ipsec.spiInfo[inSPIID]

	if count == 0 && ok {
		inSPI := inSPIInfo.spi

		inSA := &netlink.XfrmState{
			Src:   remoteIP,
			Dst:   localIP,
			Proto: netlink.XFRM_PROTO_ESP,
			Spi:   int(inSPI),
		}
		if err := netlink.XfrmStateDel(inSA); err != nil {
			return errors.Wrap(err,
				fmt.Sprintf("xfrm state del (in, %s, %s, 0x%x)", inSA.Src, inSA.Dst, inSA.Spi))
		}

		if err := ipsec.removeDropNonEncrypted(localIP, remoteIP, udpPort, inSPI); err != nil {
			return errors.Wrap(err,
				fmt.Sprintf("remove protecting rules (%s, %s, %d, 0x%x)", localIP, remoteIP, udpPort, inSPI))
		}

		delete(ipsec.spiInfo, inSPIID)
		delete(ipsec.spis, inSPI)
	}

	// Destroy outbound

	if outSPIInfo, ok := ipsec.spiInfo[outSPIID]; ok {
		if err := netlink.XfrmPolicyDel(xfrmPolicy(localIP, remoteIP, outSPIInfo.spi)); err != nil {
			return errors.Wrap(err,
				fmt.Sprintf("xfrm policy del (%s, %s, 0x%x)", localIP, remoteIP, outSPIInfo.spi))
		}

		outSA := &netlink.XfrmState{
			Src:   localIP,
			Dst:   remoteIP,
			Proto: netlink.XFRM_PROTO_ESP,
			Spi:   int(outSPIInfo.spi),
		}
		if err := netlink.XfrmStateDel(outSA); err != nil {
			return errors.Wrap(err,
				fmt.Sprintf("xfrm state del (out, %s, %s, 0x%x)", outSA.Src, outSA.Dst, outSA.Spi))
		}

		delete(ipsec.spiInfo, outSPIID)
		delete(ipsec.spis, outSPIInfo.spi)
	}

	return nil
}

// Flush removes all policies/SAs established by us. Also, it removes chains and
// rules of iptables.
//
// If destroy is true, the chains and the rules won't be re-created.
// TODO(mp) maybe use the security context (XFRM_SEC_CTX) to identify SAs/SPs created by us.
func (ipsec *IPSec) Flush(destroy bool) error {
	ipsec.Lock()
	defer ipsec.Unlock()

	policies, err := netlink.XfrmPolicyList(syscall.AF_INET)
	if err != nil {
		return errors.Wrap(err, "xfrm policy list")
	}
	for _, p := range policies {
		if p.Mark != nil && p.Mark.Value == mark && len(p.Tmpls) != 0 {
			spi := SPI(p.Tmpls[0].Spi)
			if err := netlink.XfrmPolicyDel(&p); err != nil {
				return errors.Wrap(err, fmt.Sprintf("xfrm policy del (%s, %s, 0x%x)", p.Src, p.Dst, spi))
			}
		}
	}

	states, err := netlink.XfrmStateList(syscall.AF_INET)
	if err != nil {
		return errors.Wrap(err, "xfrm state list")
	}
	for _, s := range states {
		if _, ok := ipsec.spis[SPI(s.Spi)]; ok {
			if err := netlink.XfrmStateDel(&s); err != nil {
				return errors.Wrap(err, fmt.Sprintf("xfrm state list (%s, %s, 0x%x)", s.Src, s.Dst, s.Spi))
			}
		}
	}

	if err := ipsec.resetIPTables(destroy); err != nil {
		return errors.Wrap(err, "reset ip tables")
	}

	return nil
}

// iptables

// INBOUND:
// --------
//
// mangle:
// -A INPUT -j WEAVE-IPSEC-IN															# default
// -A WEAVE-IPSEC-IN -s $remote -d $local -m esp --espspi $spi -j WEAVE-IPSEC-IN-MARK	# InitSALocal
// -A WEAVE-IPSEC-IN-MARK --set-xmark $mark	-j MARK 									# default
//
// filter:
// -A INPUT -j WEAVE-IPSEC-IN																	# default
// -A WEAVE-IPSEC-IN -s $remote -d $local -p udp --dport $port -m mark ! --mark $mark -j DROP	# InitSALocal
//
//
// OUTBOUND:
// ---------
//
// mangle:
// -A OUTPUT -j WEAVE-IPSEC-OUT																	# default
// -A WEAVE-IPSEC-OUT -s $local -d $remote -p udp --dport $port -j WEAVE-IPSEC-OUT-MARK			# InitSALocal
// -A WEAVE-IPSEC-OUT-MARK --set-xmark $mark -j MARK											# default
//
// filter:
// -A OUTPUT ! -p esp -m policy --dir out --pol none -m mark --mark $mark -j DROP				# default

type chain struct {
	table string
	chain string
}
type rule struct {
	table    string
	chain    string
	rulespec []string
}

func (ipsec *IPSec) clearChains(chains []chain) error {
	for _, c := range chains {
		if err := ipsec.ipt.ClearChain(c.table, c.chain); err != nil {
			return errors.Wrap(err, fmt.Sprintf("iptables clear chain (%s, %s)", c.table, c.chain))
		}
	}
	return nil
}

func (ipsec *IPSec) deleteChains(chains []chain) error {
	for _, c := range chains {
		if err := ipsec.ipt.DeleteChain(c.table, c.chain); err != nil {
			return errors.Wrap(err, fmt.Sprintf("iptables delete chain (%s, %s)", c.table, c.chain))
		}
	}
	return nil
}

func (ipsec *IPSec) resetRules(rules []rule, destroy bool) error {
	for _, r := range rules {
		ok, err := ipsec.ipt.Exists(r.table, r.chain, r.rulespec...)
		if err != nil {
			return errors.Wrap(err, fmt.Sprintf("iptables exists rule (%s, %s, %s)", r.table, r.chain, r.rulespec))
		}
		switch {
		case !destroy && !ok:
			if err := ipsec.ipt.Append(r.table, r.chain, r.rulespec...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("iptables append rule (%s, %s, %s)", r.table, r.chain, r.rulespec))
			}
		case destroy && ok:
			if err := ipsec.ipt.Delete(r.table, r.chain, r.rulespec...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("iptables delete rule (%s, %s, %s)", r.table, r.chain, r.rulespec))
			}
		}
	}
	return nil
}

func (ipsec *IPSec) resetIPTables(destroy bool) error {
	chains := []chain{
		{tableMangle, chainIn},
		{tableMangle, chainInMark},
		{tableFilter, chainIn},
		{tableMangle, chainOut},
		{tableMangle, chainOutMark},
	}
	rules := []rule{
		{tableMangle, "INPUT", []string{"-j", chainIn}},
		{tableMangle, chainInMark, []string{"-j", "MARK", "--set-xmark", markStr}},
		{tableFilter, "INPUT", []string{"-j", chainIn}},
		{tableMangle, "OUTPUT", []string{"-j", chainOut}},
		{tableMangle, chainOutMark, []string{"-j", "MARK", "--set-xmark", markStr}},
		{tableFilter, "OUTPUT",
			[]string{
				"!", "-p", "esp",
				"-m", "policy", "--dir", "out", "--pol", "none",
				"-m", "mark", "--mark", markStr,
				"-j", "DROP"}},
	}

	if err := ipsec.clearChains(chains); err != nil {
		return err
	}

	if err := ipsec.resetRules(rules, destroy); err != nil {
		return err
	}

	if destroy {
		if err := ipsec.deleteChains(chains); err != nil {
			return err
		}
	}

	return nil
}

func ruleMarkInboundESP(srcIP, dstIP net.IP, inSPI SPI) rule {
	return rule{tableMangle, chainIn,
		[]string{
			"-s", dstIP.String(), "-d", srcIP.String(),
			"-p", "esp",
			"-m", "esp", "--espspi", "0x" + strconv.FormatUint(uint64(inSPI), 16),
			"-j", chainInMark,
		}}
}

func rulesDropNonEncrypted(srcIP, dstIP net.IP, udpPort int, inSPI SPI) []rule {
	udpPortStr := strconv.FormatUint(uint64(udpPort), 10)
	return []rule{
		ruleMarkInboundESP(srcIP, dstIP, inSPI),
		{tableFilter, chainIn,
			[]string{
				"-s", dstIP.String(), "-d", srcIP.String(),
				"-p", "udp", "--dport", udpPortStr,
				"-m", "mark", "!", "--mark", markStr,
				"-j", "DROP",
			}},
		{tableMangle, chainOut,
			[]string{
				"-s", srcIP.String(), "-d", dstIP.String(),
				"-p", "udp", "--dport", udpPortStr,
				"-j", chainOutMark,
			}},
	}
}

func (ipsec *IPSec) installDropNonEncrypted(srcIP, dstIP net.IP, udpPort int, inSPI SPI) error {
	rules := rulesDropNonEncrypted(srcIP, dstIP, udpPort, inSPI)
	for _, r := range rules {
		if err := ipsec.ipt.AppendUnique(r.table, r.chain, r.rulespec...); err != nil {
			return errors.Wrap(err, fmt.Sprintf("iptables append unique (%s, %s, %s)", r.table, r.chain, r.rulespec))
		}
	}
	return nil
}

func (ipsec *IPSec) removeDropNonEncrypted(srcIP, dstIP net.IP, udpPort int, inSPI SPI) error {
	if err := ipsec.resetRules(rulesDropNonEncrypted(srcIP, dstIP, udpPort, inSPI), true); err != nil {
		return err
	}
	return nil
}

func (ipsec *IPSec) updateDropNonEncrypted(srcIP, dstIP net.IP, inSPI SPI) error {
	r := ruleMarkInboundESP(srcIP, dstIP, inSPI)
	if err := ipsec.ipt.AppendUnique(r.table, r.chain, r.rulespec...); err != nil {
		return errors.Wrap(err, fmt.Sprintf("iptables append unique (%s, %s, %s)", r.table, r.chain, r.rulespec))
	}
	return nil
}

func (ipsec *IPSec) removeDropNonEncryptedInbound(srcIP, dstIP net.IP, inSPI SPI) error {
	r := ruleMarkInboundESP(srcIP, dstIP, inSPI)
	if err := ipsec.ipt.Delete(r.table, r.chain, r.rulespec...); err != nil {
		return errors.Wrap(err, fmt.Sprintf("iptables delete unique (%s, %s, %s)", r.table, r.chain, r.rulespec))
	}
	return nil
}

// xfrm

func xfrmStateLimits(isDirOut bool) netlink.XfrmStateLimits {
	limits := netlink.XfrmStateLimits{
		ByteHard: 350 * 1024 * 1024, // 350mb
		TimeHard: 30 * 60,           // 30min
	}

	if isDirOut {
		limits.ByteSoft = pct90(limits.ByteHard)
		limits.TimeSoft = pct90(limits.TimeSoft)
	}

	return limits
}

func pct90(of uint64) uint64 {
	return uint64(0.9 * float64(of))
}

func xfrmAllocSpiState(srcIP, dstIP net.IP) *netlink.XfrmState {
	return &netlink.XfrmState{
		Src:          srcIP,
		Dst:          dstIP,
		Proto:        netlink.XFRM_PROTO_ESP,
		Mode:         netlink.XFRM_MODE_TRANSPORT,
		ReplayWindow: 32,
	}
}

func xfrmState(srcIP, dstIP net.IP, spi SPI, isDirOut bool, key []byte) (*netlink.XfrmState, error) {
	if len(key) != keySize {
		return nil, fmt.Errorf("key should be %d bytes long", keySize)
	}

	state := xfrmAllocSpiState(srcIP, dstIP)

	state.Spi = int(spi)
	state.Aead = &netlink.XfrmStateAlgo{
		Name:   "rfc4106(gcm(aes))",
		Key:    key,
		ICVLen: 128,
	}
	state.Limits = xfrmStateLimits(isDirOut)

	return state, nil
}

func xfrmPolicy(srcIP, dstIP net.IP, spi SPI) *netlink.XfrmPolicy {
	ipMask := []byte{0xff, 0xff, 0xff, 0xff} // /32

	return &netlink.XfrmPolicy{
		Src:   &net.IPNet{IP: srcIP, Mask: ipMask},
		Dst:   &net.IPNet{IP: dstIP, Mask: ipMask},
		Proto: syscall.IPPROTO_UDP,
		Dir:   netlink.XFRM_DIR_OUT,
		Mark: &netlink.XfrmMark{
			Value: mark,
			Mask:  mark,
		},
		Tmpls: []netlink.XfrmPolicyTmpl{
			{
				Src:   srcIP,
				Dst:   dstIP,
				Proto: netlink.XFRM_PROTO_ESP,
				Mode:  netlink.XFRM_MODE_TRANSPORT,
				Spi:   int(spi),
			},
		},
		// TODO(mp) maybe add hard limits
	}
}

// Key derivation

func genNonce() ([]byte, error) {
	buf := make([]byte, nonceSize)
	n, err := rand.Read(buf)
	if err != nil {
		return nil, fmt.Errorf("crypto rand failed: %s", err)
	}
	if n != nonceSize {
		return nil, fmt.Errorf("not enough of random data: %d", n)
	}
	return buf, nil
}

func deriveKey(sessionKey []byte, nonce []byte, peerName mesh.PeerName) ([]byte, error) {
	key := make([]byte, keySize)

	info := make([]byte, 8)
	binary.BigEndian.PutUint64(info, uint64(peerName))

	hkdf := hkdf.New(sha256.New, sessionKey, nonce, info)

	n, err := io.ReadFull(hkdf, key)
	if err != nil {
		return nil, err
	}
	if n != keySize {
		return nil, fmt.Errorf("derived too short key: %d", n)
	}

	return key, nil
}

// Protocol Messages

type msgInitSARemote struct {
	nonce []byte
	spi   SPI
}

func deserializeMsgInitSARemote(b []byte) (*msgInitSARemote, error) {
	if len(b) == 0 {
		return nil, fmt.Errorf("empty msg")
	}
	if vsn := b[0]; vsn != protoVsn {
		return nil, fmt.Errorf("unsupported proto vsn: %d", vsn)
	}

	msg := &msgInitSARemote{}
	b = b[1:]
	if len(b) != msg.size() {
		return nil, fmt.Errorf("invalid payload size: %d", len(b))
	}

	msg.nonce = make([]byte, nonceSize)
	copy(msg.nonce, b[:nonceSize])
	b = b[nonceSize:]

	msg.spi = SPI(binary.BigEndian.Uint32(b))

	return msg, nil
}

func (msg *msgInitSARemote) size() int {
	return nonceSize + 32 // SPI
}

func (msg *msgInitSARemote) serialize() []byte {
	b := make([]byte, msg.size()+1)

	b[0] = protoVsn
	copy(b[1:1+nonceSize], msg.nonce)
	binary.BigEndian.PutUint32(b[1+nonceSize:], uint32(msg.spi))

	return b
}

// Reference counting for outbound ipsec establishments.
//
// Mesh might simultaneously create two connections for the same peer pair which
// could result in establishing ipsec multiple times.

type connRefCount struct {
	ref map[spiID]int
}

func newConnRefCount() *connRefCount {
	return &connRefCount{ref: make(map[spiID]int)}
}

func (rc *connRefCount) get(id spiID) int {
	rc.ref[id]++
	return rc.ref[id]
}

func (rc *connRefCount) put(id spiID) int {
	rc.ref[id]--
	return rc.ref[id]
}
